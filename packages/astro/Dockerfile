FROM node:19-alpine as base

RUN npm i -g pnpm
WORKDIR /app

COPY ./pnpm-lock.yaml ./
RUN pnpm fetch

ADD . ./
RUN pnpm recursive install --offline

# Development Target
FROM base as dev
EXPOSE 3000
CMD [ "pnpm", "--filter=astro", "dev" ]
ENTRYPOINT ["tail", "-f", "/dev/null"] 

# Production Target
FROM base as prod
EXPOSE 3000
RUN pnpm --filter=astro build
CMD [ "pnpm", "--filter=astro", "start:server" ]
ENTRYPOINT ["tail", "-f", "/dev/null"] 

# FROM kindest/base as base

# # RUN apk add doas; \
# #     echo 'node:node' | chpasswd; \
# #     echo 'permit :wheel as root' > /etc/doas.d/doas.conf

# # USER root
# RUN curl -fsSL https://get.pnpm.io/install.sh | sh -
# RUN pnpm env use --global latest

# # WORKDIR /app
# WORKDIR /home/node

# # Cache the dependencies as a layer (the following two steps are re-run only when deps.ts is modified).
# # Ideally cache deps.ts will download and compile _all_ external files used in main.ts.
# COPY packages/astro /home/node/packages/astro
# COPY packages/shared /home/node/packages/shared
# COPY node_modules /home/node/node_modules

# COPY ./pnpm-lock.yaml ./
# # RUN pnpm fetch

# COPY . ./

# # RUN mkdir /.config

# # RUN chown -R node:wheel /home/node/node_modules
# # RUN chown -R node:wheel /home/node/packages

# #RUN pnpm recursive install --offline --frozen-lockfile
# #RUN pnpm --filter=astro build

# # Development Target
# FROM base as dev
# USER node
# ENTRYPOINT ["tail", "-f", "/dev/null"]
# ENTRYPOINT ["/bin/sh", "-c"]

# COPY --from=base /app /
#EXPOSE 3000
# CMD [ "pnpm", "--filter=astro", "dev" ] 
# ENTRYPOINT ["tail", "-f", "/dev/null"]  

# # Production Target
# FROM base as prod
# USER node
# COPY --from=base /app /  
# CMD [ "pnpm", "--filter=astro", "dev" ] 
# ENTRYPOINT ["/bin/sh", "-c"]

# # COPY --from=base /app/packages/astro /packages/astro
# #EXPOSE 3000
# #CMD [ "pnpm", "--filter=astro", "start:server" ] 

# # Prefer not to run as root.
# # USER node